{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ccd83793",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_list = [\n",
    "    {\n",
    "        \"idx\": 1,\n",
    "        \"item_code\": \"Executive Desk (4*2)\",\n",
    "        \"sales_description\": \"Dedicated Executive Desk\",\n",
    "        \"qty\": 10,\n",
    "        \"rate\": \"1000\",\n",
    "        \"amount\": \"10000\",\n",
    "        \"start_date\": \"2023-11-01\",\n",
    "        \"stop_date\": \"2024-10-17\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 2,\n",
    "        \"item_code\": \"Executive Desk (4*2)\",\n",
    "        \"qty\": \"10\",\n",
    "        \"rate\": \"1080\",\n",
    "        \"amount\": \"10800\",\n",
    "        \"start_date\": \"2024-10-18\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 3,\n",
    "        \"item_code\": \"Executive Desk (4*2)\",\n",
    "        \"qty\": 15,\n",
    "        \"rate\": \"1080\",\n",
    "        \"amount\": \"16200\",\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 4,\n",
    "        \"item_code\": \"Executive Desk (4*2)\",\n",
    "        \"qty\": 5,\n",
    "        \"rate\": \"1000\",\n",
    "        \"amount\": \"5000\",\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 5,\n",
    "        \"item_code\": \"Manager Cabin\",\n",
    "        \"qty\": 5,\n",
    "        \"rate\": 5000,\n",
    "        \"amount\": 25000,\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 6,\n",
    "        \"item_code\": \"Manager Cabin\",\n",
    "        \"qty\": 7,\n",
    "        \"rate\": \"5000\",\n",
    "        \"amount\": 35000,\n",
    "        \"start_date\": \"2024-12-15\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 7,\n",
    "        \"item_code\": \"Manager Cabin\",\n",
    "        \"qty\": 10,\n",
    "        \"rate\": 4600,\n",
    "        \"amount\": 46000,\n",
    "        \"start_date\": \"2023-11-01\",\n",
    "        \"stop_date\": \"2024-10-17\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 8,\n",
    "        \"item_code\": \"Parking (2S)\",\n",
    "        \"qty\": 10,\n",
    "        \"rate\": 1000,\n",
    "        \"amount\": 10000,\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 9,\n",
    "        \"item_code\": \"Parking (2S)\",\n",
    "        \"qty\": 10,\n",
    "        \"rate\": 0,\n",
    "        \"amount\": 0,\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-10-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 10,\n",
    "        \"item_code\": \"Executive Desk (4*2)\",\n",
    "        \"qty\": \"8\",\n",
    "        \"rate\": \"1100\",\n",
    "        \"amount\": \"8800\",\n",
    "        \"start_date\": \"2024-11-15\",\n",
    "        \"stop_date\": \"2025-01-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 11,\n",
    "        \"item_code\": \"Manager Cabin\",\n",
    "        \"qty\": \"3\",\n",
    "        \"rate\": \"5200\",\n",
    "        \"amount\": \"15600\",\n",
    "        \"start_date\": \"2024-10-10\",\n",
    "        \"stop_date\": \"2024-11-10\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 12,\n",
    "        \"item_code\": \"Conference Table\",\n",
    "        \"qty\": 1,\n",
    "        \"rate\": \"20000\",\n",
    "        \"amount\": \"20000\",\n",
    "        \"start_date\": \"2024-11-05\",\n",
    "        \"stop_date\": \"2024-11-20\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 13,\n",
    "        \"item_code\": \"Parking (2S)\",\n",
    "        \"qty\": 5,\n",
    "        \"rate\": \"1000\",\n",
    "        \"amount\": \"5000\",\n",
    "        \"start_date\": \"2024-11-15\",\n",
    "        \"stop_date\": \"2025-02-28\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 14,\n",
    "        \"item_code\": \"Reception Desk\",\n",
    "        \"qty\": 2,\n",
    "        \"rate\": \"7000\",\n",
    "        \"amount\": \"14000\",\n",
    "        \"start_date\": \"2024-11-01\",\n",
    "        \"stop_date\": \"2025-03-31\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 15,\n",
    "        \"item_code\": \"Reception Desk\",\n",
    "        \"qty\": 1,\n",
    "        \"rate\": \"7000\",\n",
    "        \"amount\": \"7000\",\n",
    "        \"start_date\": \"2024-11-10\",\n",
    "        \"stop_date\": \"2024-11-25\",\n",
    "    },\n",
    "    {\n",
    "        \"idx\": 16,\n",
    "        \"item_code\": \"Breakout Area\",\n",
    "        \"qty\": 3,\n",
    "        \"rate\": \"3000\",\n",
    "        \"amount\": \"9000\",\n",
    "        \"start_date\": \"2024-01-01\",\n",
    "        \"stop_date\": \"2024-01-31\",\n",
    "    }\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1c28a37",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, timedelta\n",
    "from collections import defaultdict\n",
    "from calendar import monthrange\n",
    "\n",
    "def generate_monthly_bill(item_list: list, target_month: str) -> dict:\n",
    "    # Parse target month start and end dates\n",
    "    year, month = map(int, target_month.split('-'))\n",
    "    month_start = datetime(year, month, 1)\n",
    "    month_end = datetime(year, month, monthrange(year, month)[1])\n",
    "    total_days_in_month = (month_end - month_start).days + 1\n",
    "\n",
    "    grouped_items = defaultdict(lambda: {\"qty\": 0, \"amount\": 0.0})\n",
    "    \n",
    "    for item in item_list:\n",
    "        # Convert dates\n",
    "        item_start = datetime.strptime(item['start_date'], '%Y-%m-%d')\n",
    "        item_stop = datetime.strptime(item['stop_date'], '%Y-%m-%d')\n",
    "        \n",
    "        # Determine active overlap\n",
    "        active_start = max(month_start, item_start)\n",
    "        active_end = min(month_end, item_stop)\n",
    "        \n",
    "        if active_start > active_end:\n",
    "            continue  # Skip items not active during this month\n",
    "\n",
    "        active_days = (active_end - active_start).days + 1\n",
    "        daily_rate = float(item['rate']) * int(item['qty']) / total_days_in_month\n",
    "        amount = round(daily_rate * active_days, 2)\n",
    "\n",
    "        billing_period = f\"{active_start.strftime('%Y-%m-%d')} to {active_end.strftime('%Y-%m-%d')}\"\n",
    "        key = (item['item_code'], float(item['rate']), billing_period)\n",
    "\n",
    "        grouped_items[key][\"qty\"] += int(item['qty'])\n",
    "        grouped_items[key][\"amount\"] += amount\n",
    "\n",
    "    # Prepare output\n",
    "    line_items = []\n",
    "    total_revenue = 0.0\n",
    "    for (item_code, rate, billing_period), data in grouped_items.items():\n",
    "        amount = round(data['amount'], 2)\n",
    "        line_items.append({\n",
    "            \"item_code\": item_code,\n",
    "            \"rate\": rate,\n",
    "            \"qty\": data[\"qty\"],\n",
    "            \"amount\": amount,\n",
    "            \"billing_period\": billing_period\n",
    "        })\n",
    "        total_revenue += amount\n",
    "\n",
    "    return {\n",
    "        \"line_items\": line_items,\n",
    "        \"total_revenue\": round(total_revenue, 2)\n",
    "    }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "693345e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'line_items': [{'item_code': 'Executive Desk (4*2)', 'rate': 1080.0, 'qty': 25, 'amount': 27000.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Executive Desk (4*2)', 'rate': 1000.0, 'qty': 5, 'amount': 5000.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Manager Cabin', 'rate': 5000.0, 'qty': 5, 'amount': 25000.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Parking (2S)', 'rate': 1000.0, 'qty': 10, 'amount': 10000.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Parking (2S)', 'rate': 0.0, 'qty': 10, 'amount': 0.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Executive Desk (4*2)', 'rate': 1100.0, 'qty': 8, 'amount': 4693.33, 'billing_period': '2024-11-15 to 2024-11-30'}, {'item_code': 'Manager Cabin', 'rate': 5200.0, 'qty': 3, 'amount': 5200.0, 'billing_period': '2024-11-01 to 2024-11-10'}, {'item_code': 'Conference Table', 'rate': 20000.0, 'qty': 1, 'amount': 10666.67, 'billing_period': '2024-11-05 to 2024-11-20'}, {'item_code': 'Parking (2S)', 'rate': 1000.0, 'qty': 5, 'amount': 2666.67, 'billing_period': '2024-11-15 to 2024-11-30'}, {'item_code': 'Reception Desk', 'rate': 7000.0, 'qty': 2, 'amount': 14000.0, 'billing_period': '2024-11-01 to 2024-11-30'}, {'item_code': 'Reception Desk', 'rate': 7000.0, 'qty': 1, 'amount': 3733.33, 'billing_period': '2024-11-10 to 2024-11-25'}], 'total_revenue': 107960.0}\n"
     ]
    }
   ],
   "source": [
    "result = generate_monthly_bill(item_list, \"2024-11\")\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0ac3c2e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
